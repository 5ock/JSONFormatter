{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","marginTop","flexGrow","block","textAlign","textareaStyle","width","resize","App","props","id","jsonData","useRef","classes","useState","jsonFormatted","setJsonFormatted","Grid","container","className","item","xs","onChange","v","current","target","value","rows","Button","variant","color","onClick","JSON","parse","stringify","defaultProps","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAOMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACxCC,KAAM,CACLC,UAAW,OACXC,SAAU,GAEXC,MAAO,CACNC,UAAW,UAEZC,cAAe,CACdC,MAAO,MACPC,OAAQ,gBAIJC,EAAM,SAACC,GACZ,IAAQC,EAAOD,EAAPC,GACFC,EAAWC,mBACXC,EAAUhB,IAChB,EAA4CiB,qBAA5C,mBAAQC,EAAR,KAAuBC,EAAvB,KAOA,OAAQ,qBAAKN,GAAIA,EAAT,SACP,eAACO,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAWN,EAAQb,KAAnC,UACO,cAACiB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGF,UAAWN,EAAQV,MAArC,SACL,0BAAUgB,UAAWN,EAAQR,cAAeiB,SAAW,SAAAC,GAAC,OAAIZ,EAASa,QAAUD,EAAEE,OAAOC,OAAQC,KAAK,SAEhG,cAACV,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGF,UAAWN,EAAQV,MAArC,SACL,cAACyB,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAX1B,WACuB,kBAAjCC,KAAKC,MAAMtB,EAASa,UAC9BR,EAAiBgB,KAAKE,UAAUF,KAAKC,MAAMtB,EAASa,SAAU,KAAM,KASlE,uBAEK,cAACP,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGF,UAAWN,EAAQV,MAArC,SACL,0BAAUgB,UAAWN,EAAQR,cAAesB,KAAK,KAAKD,MAAOX,YAUjEP,EAAI2B,aAAe,CAClBzB,GAAI,iBAGUF,QC3CA4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0c3d8e82.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport Button from '@material-ui/core/Button'\nimport Grid from '@material-ui/core/Grid'\nimport { makeStyles } from '@material-ui/core/styles'\nimport './App.css'\n\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t\tmarginTop: '30px',\n\t\tflexGrow: 1,\n\t},\n\tblock: {\n\t\ttextAlign: 'center'\n\t},\n\ttextareaStyle: {\n\t\twidth: '80%',\n\t\tresize: 'vertical'\n\t},\n}))\n\nconst App = (props) => {\n\tconst { id } = props\n\tconst jsonData = useRef()\n\tconst classes = useStyles()\n\tconst [ jsonFormatted, setJsonFormatted ] = useState()\n\n\tconst handleFormat = () => {\n\t\tif(typeof JSON.parse(jsonData.current) === 'object')\n\t\tsetJsonFormatted(JSON.stringify(JSON.parse(jsonData.current), null, 4))\n\t}\n\n\treturn (<div id={id}>\n\t\t<Grid container className={classes.root}>\n        \t<Grid item xs={5} className={classes.block}>\n\t\t\t\t<textarea className={classes.textareaStyle} onChange={ v => jsonData.current = v.target.value } rows='40' />\n\t\t\t</Grid>\n        \t<Grid item xs={2} className={classes.block}>\n\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={handleFormat}>Process</Button>\n\t\t\t</Grid>\t\n        \t<Grid item xs={5} className={classes.block}>\n\t\t\t\t<textarea className={classes.textareaStyle} rows='40' value={jsonFormatted} />\n\t\t\t</Grid>\n\t\t</Grid>\n\t</div>)\n}\n\nApp.propTypes = {\n\tid: PropTypes.string\n}\n\nApp.defaultProps = {\n\tid: 'g-json-format'\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}